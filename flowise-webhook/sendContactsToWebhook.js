async function sendContacts(contacts) {
  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ webhook:', contacts);

    const webhookUrl = 'http://flowise-webhook:3001/webhook/contacts';

    let contactData = contacts;
    if (typeof contacts === 'string') {
      try {
        contactData = JSON.parse(contacts);
      } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', e);
        return {
          success: false,
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤',
        };
      }
    }

    const name = contactData.name || contactData.Name || '';
    const phone = contactData.phone || contactData.Phone || '';

    if (!name || !phone) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è name –∏–ª–∏ phone');
      return {
        success: false,
        error: '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö',
      };
    }

    const payload = {
      name: name.trim(),
      phone: phone.toString().trim(),
    };

    console.log('üì¶ Payload –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', payload);

    const axios = require('axios');

    const response = await axios.post(webhookUrl, payload, {
      headers: {
        'Content-Type': 'application/json',
      },
      timeout: 10000,
    });

    const result = response.data;

    console.log('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', result);

    return {
      success: true,
      message: '–ö–æ–Ω—Ç–∞–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É',
      data: result,
    };
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
    return {
      success: false,
      error: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    };
  }
}

return await sendContacts($contacts);
