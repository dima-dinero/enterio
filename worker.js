export default {
  async fetch(request, env) {
    if (request.method !== 'POST') {
      return new Response('Method Not Allowed', { status: 405 });
    }

    const url = new URL(request.url);
    const parts = url.pathname.split('/').filter(Boolean);
    const expected = env.WEBFLOW_HOOK_SECRET;
    const okRoute = parts.length >= 2 && parts[parts.length - 2] === 'hook';
    const lastSeg = parts[parts.length - 1];

    if (!okRoute || !expected || lastSeg !== expected) {
      return new Response('Forbidden', { status: 403 });
    }

    try {
      // --- –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ ---
      let rawData;
      const contentType = request.headers.get('content-type') || '';

      if (contentType.includes('application/json')) {
        rawData = await request.json();
      } else if (contentType.includes('application/x-www-form-urlencoded')) {
        const formData = await request.formData();
        rawData = Object.fromEntries(formData.entries());
      } else {
        return new Response('Unsupported Content-Type', { status: 400 });
      }

      const wfData =
        rawData?.payload?.data && typeof rawData.payload.data === 'object'
          ? rawData.payload.data
          : rawData;

      const t = (v) => (v ? v.toString().trim() : '');
      const onlyDigitsPlus = (s) => t(s).replace(/[^+\d]/g, '');

      const name = t(wfData.name);
      const phone = onlyDigitsPlus(wfData.phone);
      const comment = t(wfData.comment);
      const date = t(wfData.date);
      const time = t(wfData.time);
      const formName = t(wfData.form_name) || 'Enterio';
      const companyName = t(wfData.company_name);
      const activity = t(wfData.activity);

      // --- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ---
      let comments = comment;
      if (companyName) comments += `\n–ö–æ–º–ø–∞–Ω–∏—è: ${companyName}`;
      if (activity) comments += `\n–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${activity}`;
      if (date) comments += `\n–î–∞—Ç–∞ –¥–ª—è —Å–≤—è–∑–∏: ${date}`;
      if (time) comments += `\n–í—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏: ${time}`;

      // --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
      let title = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ ${formName}`;
      let assignedId = 464;
      switch (formName.toLowerCase()) {
        case 'callback':
          title = '–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫';
          break;
        case 'appointment':
          title = '–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä–µ–∫—Ç–æ–≤';
          break;
        case 'design':
          title = '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–∏–∑–∞–π–Ω - –ø—Ä–æ–µ–∫—Ç';
          break;
        case 'renovation':
          title = '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç';
          break;
        case 'furnishing':
          title = '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é';
          break;
        case 'supervision':
          title = '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞–≤—Ç–æ—Ä—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ';
          break;
        case 'partnership':
          title = '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ';
          assignedId = 664;
          break;
      }

      // --- Bitrix ---
      const base = (env.BITRIX_BASE || '').replace(/\/+$/, '');
      if (!base) return new Response('BITRIX_BASE is not set', { status: 500 });

      const payload = {
        fields: {
          TITLE: title,
          NAME: name || undefined,
          PHONE: phone ? [{ VALUE: phone, TYPE: 'WORK' }] : [],
          COMMENTS: comments.trim() || undefined,
          SOURCE_ID: 'WEB',
          ASSIGNED_BY_ID: assignedId,
        },
        params: { REGISTER_SONET_EVENT: 'Y' },
      };

      const bitrixResp = await fetch(`${base}/crm.lead.add.json`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      const bitrixResult = await bitrixResp.json().catch(() => ({}));

      // --- –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è ---
      if (bitrixResp.ok && bitrixResult?.result && date && time) {
        const leadId = bitrixResult.result;

        const dateMatch = date.match(/(\d{2})\.(\d{2})\.(\d{4})/);
        const dateISO = dateMatch
          ? `${dateMatch[3]}-${dateMatch[2]}-${dateMatch[1]}`
          : null;

        const timeMatch = time.match(/(\d{1,2}:\d{2})(?:-(\d{1,2}:\d{2}))?/);
        const startTime = timeMatch ? timeMatch[1] : null;
        const endTime = timeMatch?.[2] || startTime;

        if (dateISO && startTime) {
          const start = `${dateISO}T${startTime}:00`;
          const end = `${dateISO}T${endTime}:00`;

          const activityPayload = {
            fields: {
              OWNER_ID: leadId,
              OWNER_TYPE_ID: 1,
              TYPE_ID: 2,
              SUBJECT: '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º',
              DESCRIPTION: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ –∏–∑ —Ñ–æ—Ä–º—ã —Å–∞–π—Ç–∞',
              START_TIME: start,
              END_TIME: end,
              RESPONSIBLE_ID: assignedId,
              COMPLETED: 'N',
              NOTIFY_TYPE: 2,
              NOTIFY_VALUE: 15,
              COMMUNICATIONS: phone
                ? [{ VALUE: phone, TYPE: 'PHONE' }]
                : [{ VALUE: 'info@enterio.ru', TYPE: 'EMAIL' }],
            },
          };

          const activityResp = await fetch(`${base}/crm.activity.add.json`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(activityPayload),
          });

          await activityResp.json().catch(() => ({}));
        }
      }

      // --- Unisender ---
      const listsResp = await fetch(
        'https://api.unisender.com/ru/api/getLists?format=json',
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: new URLSearchParams({
            api_key: env.UNISENDER_API_KEY,
          }),
        }
      );

      const listsData = await listsResp.json().catch(() => null);
      const listId =
        Array.isArray(listsData?.result) && listsData.result[0]?.id;
      if (!listId) {
        return new Response('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å list_id –∏–∑ Unisender', {
          status: 500,
        });
      }

      const emailBody = `
        ${title}:<br/>
        <strong>–ò–º—è:</strong> ${name}<br/>
        <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${phone}<br/>
        ${companyName ? `<strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> ${companyName}<br/>` : ''}
        ${activity ? `<strong>–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</strong> ${activity}<br/>` : ''}
        <strong>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</strong> ${comment}<br/>
        ${date ? `<strong>–î–∞—Ç–∞:</strong> ${date}<br/>` : ''}
        ${time ? `<strong>–í—Ä–µ–º—è:</strong> ${time}<br/>` : ''}
      `;

      await fetch('https://api.unisender.com/ru/api/sendEmail?format=json', {
        method: 'POST',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        body: new URLSearchParams({
          api_key: env.UNISENDER_API_KEY,
          email: `Enterio <zayavki@enterio.ru>`,
          sender_name: 'Enterio',
          sender_email: 'info@enterio.ru',
          subject: title,
          body: emailBody,
          list_id: listId,
          lang: 'ru',
          error_checking: '1',
        }),
      });

      // --- Telegram ---
      const telegramToken = env.TELEGRAM_BOT_TOKEN;
      const telegramChatId = env.TELEGRAM_CHAT_ID;
      if (telegramToken && telegramChatId) {
        const tgMessage = [
          `üì¨ <b>${title}</b>`,
          `<b>–ò–º—è:</b> ${name || '‚Äî'}`,
          `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone || '‚Äî'}`,
          companyName ? `<b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${companyName}` : null,
          activity ? `<b>–°—Ñ–µ—Ä–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b> ${activity}` : null,
          comment ? `<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${comment}` : null,
          date ? `<b>–î–∞—Ç–∞ –¥–ª—è —Å–≤—è–∑–∏:</b> ${date}` : null,
          time ? `<b>–í—Ä–µ–º—è –¥–ª—è —Å–≤—è–∑–∏:</b> ${time}` : null,
        ]
          .filter(Boolean)
          .join('\n');

        await fetch(
          `https://api.telegram.org/bot${telegramToken}/sendMessage`,
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: telegramChatId,
              text: tgMessage,
              parse_mode: 'HTML',
            }),
          }
        );
      }

      return new Response(
        JSON.stringify({
          ok: bitrixResp.ok,
          bitrix: bitrixResult,
        }),
        {
          status: bitrixResp.ok ? 200 : 500,
          headers: { 'Content-Type': 'application/json' },
        }
      );
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –≤ –≤–æ—Ä–∫–µ—Ä–µ:', e);
      return new Response(`Error: ${e?.message || e}`, { status: 500 });
    }
  },
};
